#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W     &kp E         &kp R        &kp T                                           &kp Y        &kp U  &lt 5 I   &kp O     &kp P
&kp A             &kp S     &kp D         &kp F        &kp G        &trans            &kp ESCAPE       &kp H        &kp J  &kp K     &kp L     &mkp MB4
&mt LEFT_SHIFT Z  &kp X     &kp C         &kp V        &kp B        &kp LEFT_ALT      &kp RIGHT_SHIFT  &kp N        &kp M  &mkp MB1  &mkp MB2  &mkp MB5
&kp LCTRL         &kp LCMD  &kp LEFT_ALT  &lt 1 ENTER  &lt 2 SPACE  &lt 3 TAB         &lt 4 BACKSPACE  &lt 5 LANG1                             &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Symbol1 {
            bindings = <
&kp EXCLAMATION  &kp QUESTION  &kp TILDE      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                      &kp SQT        &kp DOUBLE_QUOTES  &kp GRAVE       &kp CARET         &kp BACKSLASH
&kp AT_SIGN      &kp HASH      &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans      &trans  &kp SEMICOLON  &kp COLON          &kp LESS_THAN   &kp GREATER_THAN  &kp SLASH
&trans           &kp PERCENT   &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans      &trans  &kp COMMA      &kp PERIOD         &kp UNDERSCORE  &trans            &kp PIPE
&trans           &trans        &trans         &trans                &trans                 &trans      &trans  &trans                                                              &trans
            >;
        };

        Number {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5                          &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &trans
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans      &kp EQUAL  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS         &kp MINUS
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &trans      &kp COMMA  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp ASTERISK     &kp SLASH
&trans   &trans   &trans   &trans   &trans   &trans      &trans     &kp PERIOD                                                          &trans
            >;
        };

        ARROW {
            bindings = <
&kp LG(LEFT_ARROW)  &kp LS(LC(TAB))         &kp UP_ARROW          &kp LC(TAB)              &kp LG(RIGHT_ARROW)                             &kp LG(LEFT_ARROW)  &kp RS(RC(TAB))         &kp UP_ARROW         &kp RC(TAB)              &kp RG(RIGHT_ARROW)
&kp HOME            &kp LEFT_ARROW          &kp DOWN_ARROW        &kp RIGHT_ARROW          &kp END              &trans      &kp PAGE_UP    &kp HOME            &kp LEFT_ARROW          &kp DOWN_ARROW       &kp RIGHT_ARROW          &kp END
&kp LSHIFT          &kp LS(LG(LEFT_ARROW))  &kp RS(LEFT_CONTROL)  &kp LG(LS(RIGHT_ARROW))  &trans               &trans      &kp PAGE_DOWN  &trans              &kp RS(RG(LEFT_ARROW))  &kp RC(RIGHT_SHIFT)  &kp RG(RS(RIGHT_ARROW))  &trans
&trans              &trans                  &trans                &trans                   &trans               &trans      &trans         &kp RG(TAB)                                                                               &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
